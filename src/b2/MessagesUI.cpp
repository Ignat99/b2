#include <shared/system.h>
#include "MessagesUI.h"
#include "dear_imgui.h"
#include "Messages.h"
#include "commands.h"

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

static const ImVec4 INFO_COLOUR(1.f,1.f,1.f,1.f);
static const ImVec4 WARNING_COLOUR(1.f,1.f,0.f,1.f);
static const ImVec4 ERROR_COLOUR(1.f,0.f,0.f,1.f);

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

MessagesUI::MessagesUI() {
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

MessagesUI::~MessagesUI() {
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void MessagesUI::DoMessageImGui(const MessageList::Message *m) {
    ImGuiStyleColourPusher pusher;

    switch(m->type) {
    case MessageType_Info:
        pusher.Push(ImGuiCol_Text,INFO_COLOUR);
        break;

    case MessageType_Warning:
        pusher.Push(ImGuiCol_Text,WARNING_COLOUR);
        break;

    case MessageType_Error:
        pusher.Push(ImGuiCol_Text,ERROR_COLOUR);
        break;
    }

    ImGui::TextUnformatted(m->text.c_str(),m->text.c_str()+m->text.size());
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

class MessagesUIImpl:
    public MessagesUI
{
public:
    MessagesUIImpl();

    void SetMessageList(std::shared_ptr<MessageList> message_list) override;

    void DoImGui(CommandContextStack *cc_stack) override;
protected:
private:
    std::shared_ptr<MessageList> m_message_list;

    ObjectCommandContext<MessagesUIImpl> m_occ;

    void Copy();
    void Clear();

    static ObjectCommandTable<MessagesUIImpl> ms_command_table;
};

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

ObjectCommandTable<MessagesUIImpl> MessagesUIImpl::ms_command_table("Messages Window",{
    {"copy","Copy",&MessagesUIImpl::Copy},
    {"clear","Clear",&MessagesUIImpl::Clear}
});

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

std::unique_ptr<MessagesUI> MessagesUI::Create() {
    return std::make_unique<MessagesUIImpl>();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

MessagesUIImpl::MessagesUIImpl():
    m_occ(this,&ms_command_table)
{
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void MessagesUIImpl::SetMessageList(std::shared_ptr<MessageList> message_list) {
    m_message_list=std::move(message_list);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void MessagesUIImpl::DoImGui(CommandContextStack *cc_stack) {
    cc_stack->Push(m_occ);

    m_occ.DoButton("clear");

    ImGui::SameLine();

    m_occ.DoButton("copy");

    ImGui::BeginChild("",ImVec2(),true);

    m_message_list->ForEachMessage(
        [this](const MessageList::Message *m) {
        this->DoMessageImGui(m);
    });

    ImGui::EndChild();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void MessagesUIImpl::Copy() {
    ImGuiIO &io=ImGui::GetIO();

    std::string text;

    m_message_list->ForEachMessage(
        [&text](const MessageList::Message *m) {
        text+=m->text;
    });

    (*io.SetClipboardTextFn)(io.ClipboardUserData,text.c_str());
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void MessagesUIImpl::Clear() {
    m_message_list->ClearMessages();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
