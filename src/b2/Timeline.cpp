#include <shared/system.h>
#include <shared/debug.h>
#include "Timeline.h"
#include "BeebConfig.h"
#include "BeebState.h"
#include <beeb/BBCMicro.h>

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

//Timeline::Timeline(std::shared_ptr<BeebState> initial_state,
//                   uint64_t begin_2MHz_cycles,
//                   uint64_t end_2MHz_cycles,
//                   std::vector<BeebEvent> events):
//m_initial_state(std::move(initial_state)),
//m_begin_2MHz_cycles(begin_2MHz_cycles),
//m_end_2MHz_cycles(end_2MHz_cycles),
//m_events(std::move(events))
//{
//    ASSERT(!!m_initial_state);
//
//    if(!m_events.empty()) {
//        for(size_t i=1;i<m_events.size();++i) {
//            ASSERT(m_events[i].time_2MHz_cycles>=m_events[i-1].time_2MHz_cycles);
//        }
//        ASSERT(m_events.begin()->time_2MHz_cycles>=m_begin_2MHz_cycles);
//        ASSERT(m_events.end()->time_2MHz_cycles<=m_end_2MHz_cycles);
//    }
//}
//
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//
//uint64_t Timeline::GetBegin2MHzCycles() const {
//    return m_begin_2MHz_cycles;
//}
//
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//
//uint64_t Timeline::GetEnd2MHzCycles() const {
//    return m_end_2MHz_cycles;
//}
//
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//
//std::unique_ptr<BBCMicro> Timeline::GetInitialBeebState() const {
//    return m_initial_state->CloneBBCMicro();
//}
//
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//
//size_t Timeline::GetNumEvents() const {
//    return m_events.size();
//}
//
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//
//const BeebEvent *Timeline::GetEventByIndex(size_t index) const {
//    ASSERT(index<m_events.size());
//    return &m_events[index];
//}

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
