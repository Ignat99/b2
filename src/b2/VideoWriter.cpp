#include <shared/system.h>
#include "VideoWriter.h"
#include "VideoWriterMF.h"
#include "VideoWriterFFmpeg.h"

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

VideoWriter::VideoWriter(std::shared_ptr<MessageList> message_list):
    m_msg(message_list)
{
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

VideoWriter::~VideoWriter() {
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

std::string VideoWriter::GetFileName() const {
    return m_file_name;
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void VideoWriter::SetFileName(std::string file_name) {
    m_file_name=std::move(file_name);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

int VideoWriter::GetFileType() const {
    return m_file_type;
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void VideoWriter::SetFileType(int file_type) {
    m_file_type=file_type;
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

std::shared_ptr<MessageList> VideoWriter::GetMessageList() const {
    return m_msg.GetMessageList();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

bool CanCreateVideoWriter() {
#if HAVE_FFMPEG

    if(!CanCreateVideoWriterFFmpeg()) {
        return false;
    }

    return true;

#elif SYSTEM_WINDOWS

    return true;

#else

    return false;

#endif
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

std::unique_ptr<VideoWriter> CreateVideoWriter(std::shared_ptr<MessageList> message_list) {
#if SYSTEM_WINDOWS

    return CreateVideoWriterMF(message_list);

#elif HAVE_FFMPEG

    return CreateVideoWriterFFmpeg(message_list);

#else

    (void)message_list;
    
    return nullptr;

#endif
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
