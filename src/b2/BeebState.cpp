#include <shared/system.h>
#include "BeebState.h"
#include <shared/debug.h>
#include <beeb/DiscImage.h>
#include "misc.h"
#include <beeb/BBCMicro.h>
#include "TVOutput.h"
#include <string.h>

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

BeebState::BeebState(std::unique_ptr<BBCMicro> beeb):
    BeebState(std::move(beeb),nullptr)
{
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

BeebState::BeebState(std::unique_ptr<BBCMicro> beeb,const TVOutput &tv):
    BeebState(std::move(beeb),&tv)
{
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

BeebState::~BeebState() {
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

uint64_t BeebState::GetEmulated2MHzCycles() const {
    return *m_beeb->GetNum2MHzCycles();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

std::unique_ptr<BBCMicro> BeebState::CloneBBCMicro() const {
    return m_beeb->Clone();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

BBCMicroType BeebState::GetBBCMicroType() const {
    return m_beeb->GetType();
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

std::shared_ptr<const DiscImage> BeebState::GetDiscImageByDrive(int drive) const {
    return m_beeb->GetDiscImage(drive);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

const void *BeebState::GetTVTextureData() const {
    if(m_tv_texture_data.empty()) {
        return nullptr;
    } else {
        return m_tv_texture_data.data();
    }
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

const std::string &BeebState::GetName() const {
    return m_name;
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void BeebState::SetName(std::string name) {
    m_name=name;
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

BeebState::BeebState(std::unique_ptr<BBCMicro> beeb,const TVOutput *tv):
    creation_time(GetUTCTimeNow()),
    m_beeb(std::move(beeb))
{
    if(tv) {
        m_tv_texture_data.resize(TV_TEXTURE_WIDTH*TV_TEXTURE_HEIGHT);
        memcpy(m_tv_texture_data.data(),tv->GetTexturePixels(nullptr),TV_TEXTURE_WIDTH*TV_TEXTURE_HEIGHT*4);
    }
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
